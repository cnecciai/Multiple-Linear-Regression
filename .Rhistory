axis.title.x = element_text(size = 8, color = "black"),
axis.title.y = element_text(size = 8, color = "black"),
axis.text.x = element_text(size = 8, color = "black"),
axis.text.y = element_text(size = 8, color = "black"))
#Retrieve summary statistics for atemp
tempFCSummary = numSummary(CBS$atemp, "atemp")
numVars = bind_rows(numVars, tempFCSummary)
#tempFCSummary
#atemp Distribution
atemp_plot <- CBS %>% ggplot(aes(atemp)) +
geom_histogram(aes(y = after_stat(density)), bins = 20, fill = "blue", color = "black", alpha = 0.6) +
geom_density(adjust = 3) +
labs(x = "Normalized - Real Feel Celcius",
y = "Density",
title = "Distribution of `atemp`")  +
theme(
plot.title = element_text(hjust = 0, face = "bold", size = 12),
axis.title.x = element_text(size = 8, color = "black"),
axis.title.y = element_text(size = 8, color = "black"),
axis.text.x = element_text(size = 8, color = "black"),
axis.text.y = element_text(size = 8, color = "black"))
#Retrieve summary statistics for humidity
humSummary = numSummary(CBS$hum, "hum")
numVars = bind_rows(numVars, humSummary)
#humSummary
#Humidity Distribution
hum_plot <- CBS %>% ggplot(aes(hum)) +
geom_histogram(aes(y = after_stat(density)), fill = "blue", color = "black", alpha = 0.6) +
geom_density(adjust = 3) +
labs(x = "Normalized Humidity",
y = "Density",
title = "Distribution of `hum`")  +
theme(
plot.title = element_text(hjust = 0, face = "bold", size = 12),
axis.title.x = element_text(size = 8, color = "black"),
axis.title.y = element_text(size = 8, color = "black"),
axis.text.x = element_text(size = 8, color = "black"),
axis.text.y = element_text(size = 8, color = "black"))
#Retrieve summary statistics for windspeed
windSummary = numSummary(CBS$windspeed, "windspeed")
numVars = bind_rows(numVars, windSummary)
#windSummary
#Windspeed Distribution
wind_plot <- CBS %>% ggplot(aes(windspeed)) +
geom_histogram(aes(y = after_stat(density)), fill = "blue", color = "black", alpha = 0.6) +
geom_density(adjust = 3) +
labs(x = "Normalized Windspeed",
y = "Density",
title = "Distribution of `windspeed`")  +
theme(
plot.title = element_text(hjust = 0, face = "bold", size = 12),
axis.title.x = element_text(size = 8, color = "black"),
axis.title.y = element_text(size = 8, color = "black"),
axis.text.x = element_text(size = 8, color = "black"),
axis.text.y = element_text(size = 8, color = "black"))
#Summary Statistics of Continuous Variables
library(DT)
datatable(numVars, class = 'cell-border stripe')
cont_plot <- ggarrange(temp_plot, atemp_plot, wind_plot, hum_plot)
cont_plot
holidayDates <- CBS[CBS$holiday == TRUE,]
holidayDates$date %>% unique()
#2011 Holiday Dates
USFed2011 <- c("2011-01-01", "2011-01-17", "2011-02-21","2011-04-15", "2011-05-30", "2011-07-04", "2011-09-05", "2011-10-10", "2011-11-11", "2011-11-24", "2011-12-25")
incHolidayDates2011 <- CBS[CBS$date %in% USFed2011 & CBS$holiday == FALSE,]$date %>% unique()
#2012 Holiday Dates
USFed2012 <- c("2012-01-01", "2012-01-16", "2012-02-20", "2012-04-16", "2012-05-28", "2012-07-04", "2012-09-03", "2012-10-08", "2012-11-11", "2012-11-22", "2012-12-25")
incHolidayDates2012 <- CBS[CBS$date %in% USFed2012 & CBS$holiday == FALSE,]$date %>% unique()
#Merge incorrect dates
incHolidays <- c(incHolidayDates2011, incHolidayDates2012)
print("Should be labeled as holidays: ")
print(incHolidays)
#Combined Holiday List
combinedUSFedHolidays <- c(USFed2011, USFed2012)
print("Combined List of Federally Recognized U.S. Holidays for 2011/2012: ")
print(combinedUSFedHolidays)
#Correct Holiday Labels
CBS<- CBS %>% mutate(holiday = ifelse(date %in% c(combinedUSFedHolidays), TRUE, FALSE))
#Holiday Distribution
hol_plot <- CBS %>%
ggplot(mapping = aes(x = holiday, fill = holiday)) +
geom_bar(color = "black") +
geom_text(stat = "count", aes(label = after_stat(count)), nudge_y = 1000, size = 3) +
scale_fill_viridis_d("Year", option = "magma") +
labs(title = "Distribution of `holiday`",
x = "",
y = "") +
theme(
plot.title = element_text(hjust = 0, face = "bold", size = 12),
axis.title.x = element_text(size = 8, color = "black"),
axis.title.y = element_text(size = 8, color = "black"),
axis.text.y = element_text(size = 8, color = "black")) +
guides(fill = "none") +
coord_flip()
#Holiday Distribution
work_plot <- CBS %>%
ggplot(mapping = aes(x = workingday, fill = workingday)) +
geom_bar(color = "black") +
geom_text(stat = "count", aes(label = after_stat(count)), nudge_y = 1000, size = 3) +
scale_fill_viridis_d("Year", option = "magma") +
labs(title = "Distribution of `workingday`",
x = "",
y = "") +
theme(
plot.title = element_text(hjust = 0, face = "bold", size = 12),
axis.title.x = element_text(size = 8, color = "black"),
axis.title.y = element_text(size = 8, color = "black"),
axis.text.y = element_text(size = 8, color = "black")) +
guides(fill = "none") +
coord_flip()
bool_plot <- ggarrange(work_plot, hol_plot,  nrow = 2, ncol = 1)
bool_plot
#Show relationships between predictors and dvs
pred_CBS <- CBS %>% dplyr::select(-c(registered, casual))
cor_matrix <- cor(pred_CBS[sapply(pred_CBS, is.numeric)])
# Visualize the correlation matrix using the corrplot package
corrplot(cor_matrix, method = "circle",
type = "upper", order = "AOE",
tl.col = "black", tl.cex = 1,
addCoef.col = "darkred",
number.cex = 1, tl.srt = 50)
library(PerformanceAnalytics)
corr_df <- pred_CBS %>% select_if(is.numeric)
chart.Correlation(corr_df)
temp_mult_plot <- CBS %>% ggplot(aes(atemp, temp)) +
geom_raster(aes(fill = count_rentals)) +
labs(x = "Real Feel - Celcius",
y = "Actual Temp - Celcius",
title = "Rentals Relationship to Temperature Real & Feel",
subtitle = "Highest Occurrance During Favorable Degrees of Celcius") +
scale_fill_viridis_c(option = "magma") +
theme(
plot.title = element_text(hjust = 0, face = "bold", size = 12),
axis.title.x = element_text(size = 8, color = "black"),
axis.title.y = element_text(size = 8, color = "black"),
axis.text.y = element_text(size = 8, color = "black")) +
geom_rect(aes(xmin = .21, ymin = .55, xmax = .27, ymax = .94), color = "red", fill = NA) +
geom_text(x = .20, y = .5, label = "Outliers", color = "red")
#Examine multi-variate outliers to find potential reason of high `temp` values
mvOutliers <- CBS[CBS$atemp < .3 & CBS$temp > .5,]
mvOutliers
#Remove Outlier Observations
subset <- (!(rownames(CBS) %in% rownames(mvOutliers)))
CBS <- CBS[subset, ]
rownames(CBS) <- NULL
#Examining the relationship between day of the week and hourly trends
hours <- CBS$hour %>% unique() %>% as.vector()
#Usage looks identical for casual & registered --> therefore only showing count_rentals
ss_plot <- CBS[(CBS$day %in% c("Sunday", "Saturday")),] %>%
ggplot(mapping = aes(x = factor(hour, levels = hours), count_rentals, fill = year)) +
geom_boxplot(alpha = 0.7, width = .8) +
labs(x = "", y = "Total Rentals",
title = "Weekend Hourly Trend of Rentals")+
scale_fill_viridis_d(option = "magma") +
theme(axis.text.x = element_text(angle = 90,
size = 9,
vjust = .7),
axis.ticks = element_line(color = "black")) +
facet_wrap(~day, ncol = 1, nrow  = 5)
#Weekday Trend Over Hours - Casual
wk_cas <- CBS[!(CBS$day %in% c("Sunday", "Saturday")),] %>%
ggplot(mapping = aes(x = factor(hour, levels = hours), casual, fill = year)) +
geom_boxplot(alpha = 0.7, width = .8) +
labs(x = "", y = "Casual Rentals",
title = "Weekday Hourly Trend of Casual Rentals")+
scale_fill_viridis_d(option = "magma") +
theme(axis.text.x = element_text(angle = 90,
size = 9,
vjust = .7),
axis.ticks = element_line(color = "black")) +
facet_wrap(~day, ncol = 1, nrow  = 5)
#Weekday Trend Over Hours - Registered
reg_plot <- CBS[!(CBS$day %in% c("Sunday", "Saturday")),] %>%
ggplot(mapping = aes(x = factor(hour, levels = hours), registered, fill = year)) +
geom_boxplot(alpha = 0.7, width = .8) +
labs(x = "", y = "Registered Rentals",
title = "Weekday Hourly Trend of Registered Rentals",
subtitle = "Peak Usage Before & After Work 9-5 Schedule")+
scale_fill_viridis_d(option = "magma") +
theme(axis.text.x = element_text(angle = 90,
size = 9,
vjust = .7),
axis.ticks = element_line(color = "black")) +
facet_wrap(~day, ncol = 1, nrow  = 5)
#Weekday Trend Over Hours - Total
tot_plot <- CBS[!(CBS$day %in% c("Sunday", "Saturday")),] %>%
ggplot(mapping = aes(x = factor(hour, levels = hours), count_rentals, fill = year)) +
geom_boxplot(alpha = 0.7, width = .8) +
labs(x = "", y = "Total Rentals",
title = "Weekday Hourly Trend of Total Rentals",
subtitle = "Peak Usage Before & After Work 9-5 Schedule")+
scale_fill_viridis_d(option = "magma") +
theme(axis.text.x = element_text(angle = 90,
size = 9,
vjust = .7),
axis.ticks = element_line(color = "black")) +
facet_wrap(~day, ncol = 1, nrow  = 5)
#Create Dummy Coding here for these variables
library(fastDummies)
#Create Dummy Variables
CBS <- dummy_cols(CBS, select_columns =
c("season", "year", "month", "day", "hour", "weather"),
remove_first_dummy = T) %>%
dplyr::select(-c(season, year, month, day, hour, weather))
#Coerce Logical Types to Numeric
CBS <- CBS %>% mutate_if(is.logical, as.numeric)
CBS <- CBS %>% dplyr::select(-c("casual", "registered"))
CBS <- CBS %>% dplyr::select(-c(date, atemp))
library(leaps) #Best Subset Selection
library(caret) #data split
#For Reproducibility
set.seed(123)
#80/20 Test Split
index <- createDataPartition(CBS$count_rentals, p = .8, list = FALSE)
train <- CBS[index, ]
test <- CBS[-index, ]
rownames(train) <- 1:nrow(train)
rownames(test) <- 1:nrow(test)
full_model <- lm(count_rentals ~ ., data = train)
summary(full_model)
# Kolmogorov-Smirnov Test - Normality Assumption
ks <- ks.test(full_model$residuals, 'pnorm')
if (ks$p.value <= 0.05) {
result = paste("H0 rejected: Non-Normal residuals")
} else {
result = paste("H0 failed to reject: the residuals ARE distributed normally")
}
ks
# Q-Q plot for residuals
qqnorm(resid(full_model))
qqline(resid(full_model))
#Breusch-Pagan Test - Homoscedasticity Assumption
library(lmtest)
bp <- bptest(full_model)
if (bp$p.value <= 0.05) {
result = paste("H0 rejected: Error variance spread INCONSTANTLY (Heteroscedasticity)")
} else {
result = paste("H0 failed to reject: Error variance spread CONSTANTLY (Homoscedasticity)")
}
bp
print(result)
plot(full_model, which = 1)
library(car)
df_vif = vif(full_model) %>% data.frame()
colnames(df_vif) = "VIF"
highest_vif <- df_vif %>% arrange(desc(VIF))
highest_vif
library(lmtest)
# Durbin-Watson Test
dwtest(full_model)
cd_plot <- plot(full_model, which = 5)
#Rownames were reset during train/test split
out_lev <- c(450, 7302, 7093)
train <- train[-c(out_lev), ]
train <- train %>% dplyr::select(-`weather_Type 4`)
library(MASS)
#Box-cox Transformation on count_rentals
b <- boxcox(lm(CBS$count_rentals ~ 1), plotit = F, lambda = seq(-3,3, .05))
lambda <- b$x[which.max(b$y)]
box_total <- (CBS$count_rentals ^ lambda - 1) / lambda
#Log Transformation
log_total <- log(CBS$count_rentals)
#Sqrt Transformation
sqrt_total <- sqrt(CBS$count_rentals)
#Cube Root Transformation
cube_root_total <- (CBS$count_rentals)^(1/3)
#Fourth Root Transformation
fourth_root_total <- (CBS$count_rentals)^(1/4)
ggTrans <- function(var, myTitle, my_axis) {
#Cube Root Transformation - count_rentals
skewVal <- skewness(var) %>% round(3)
CBS %>% ggplot(aes(var)) +
geom_histogram(aes(y = after_stat(density)),fill = "darkblue", color = "black", alpha = 0.6) +
geom_density(adjust = 2) +
labs(x = paste(my_axis), y = "Density",
title = myTitle,
subtitle = paste("Skewness Value: ", skewVal)) +
theme(
plot.title = element_text(hjust = 0, face = "bold", size = 12),
axis.title.x = element_text(size = 8, color = "black"),
axis.title.y = element_text(size = 8, color = "black"),
axis.text.x = element_text(size = 8, color = "black"),
axis.text.y = element_text(size = 8, color = "black"))
}
#Inspect Distributions
pl1 <- ggTrans(cube_root_total, "Cube Root Transformation", "Cube Root Total Rentals")
pl2 <- ggTrans(box_total, "Box-Cox Transformation", "Box-cox Total Rentals")
pl3 <- ggTrans(fourth_root_total, "Fourth Root Transformation", "Fourth Root Total Rentals")
pl4 <- ggTrans(sqrt_total, "Square Root Transformation", "Square Root Total Rentals")
pl5 <- ggTrans(log_total, "Log Transformation", "Log Total Rentals")
trans_total <- ggarrange(pl1, pl2, pl3, pl4, pl5, nrow = 5, ncol = 1)
trans_total
#Add cube-root transformations to the train dataset
train$cube_root_total <- (train$count_rentals)^(1/3)
#Could remove workingday & season_Summer from train df
train <- train %>% dplyr::select(-c( workingday, season_Summer))
library(leaps)
OLS.regback <- leaps::regsubsets(cube_root_total ~ . - count_rentals, train, method = "seqrep", nvmax = 45)
OLSregbacksum <- summary(OLS.regback)
adjr2mat <- data.frame(t(OLSregbacksum$adjr2))
bicmat <- data.frame(t(OLSregbacksum$bic))
cpmat <- data.frame(t(OLSregbacksum$cp))
rsqmat <- data.frame(t(OLSregbacksum$rsq))
combined_df <- data.frame(
R2 = unlist(rsqmat),
Adj_R2 = unlist(adjr2mat),
BIC = unlist(bicmat),
Mallow_Cp = unlist(cpmat)
)
adjr2 <- combined_df[36,]$Adj_R2 %>% round(2)
bic <- combined_df[36,]$BIC %>% round(2)
cp <- combined_df[36,]$Mallow_Cp %>% round(2)
par(mfrow = c(2,2))
plot(OLSregbacksum$adjr2, xlab = "Number of Variables",
ylab = "Adjusted RSq", type = "l", lwd = 1.5, main = "Number of Variables Vs. Adjusted R2",
sub = paste("Best Adjusted RSq Value: " , adjr2 ),
cex.main = 1.15, cex.lab = 1, cex.axis = 1.05, font.axis = 2,
font.lab = 2, panel.first = grid(nx = NULL, ny = NULL, col = "gray",
lty = 2))
points(37, OLSregbacksum$adjr2[37], col = "darkred", cex = 2, pch = 20)
plot(OLSregbacksum$cp, xlab = "Number of Variables", ylab = "Cp",
type = "l", lwd = 1.5, cex.main = 1.15, cex.lab = 1, cex.axis = 1.05,
font.axis = 2, font.lab = 2, main = "Number of Variables Vs. Mallow's Cp",
sub = paste("Best Mallow's Cp Value: " , cp ),
panel.first = grid(nx = NULL, ny = NULL, col = "gray", lty = 2))
points(37, OLSregbacksum$cp[37], col = "darkred", cex = 2, pch = 20)
plot(OLSregbacksum$bic, xlab = "Number of Variables", ylab = "BIC",
type = "l", lwd = 1.5, cex.main = 1.15, cex.lab = 1, cex.axis = 1.05,
font.axis = 2, font.lab = 2, main = "Number of Variables Vs. BIC",
sub = paste("Best BIC Value: " , bic ),
panel.first = grid(nx = NULL, ny = NULL, col = "gray", lty = 2))
points(37, OLSregbacksum$bic[37], col = "darkred", cex = 2, pch = 20)
plot(OLSregbacksum$rss, xlab = "Number of Variables", ylab = "RSS",
type = "l", lwd = 1.5, cex.main = 1.15, cex.lab = 1, cex.axis = 1.05,
font.axis = 2, font.lab = 2, main = "Number of Variables Vs. RSS",
panel.first = grid(nx = NULL, ny = NULL, col = "gray", lty = 2))
# Find the model with the lowest BIC value
best_model_index <- which.min(OLSregbacksum$bic)
# Get the best model
best_model <- coef(OLS.regback, id = best_model_index)
# Extract the coefficients from the best model and remove the intercept term from the coefficients
best_coefficients <- round(unname(best_model)[-1], 4)
# Get the variable names from your redDF dataframe
variable_names <- names(best_model)[-1]
# Extract the intercept coefficient separately
intercept_coefficient <- round(unname(best_model)[1], 4)
# Define the named_coefficients variable
named_coefficients <- setNames(best_coefficients, variable_names)
# Create the LaTeX equation
equation <- paste("y =", intercept_coefficient, "+", paste(named_coefficients, variable_names, sep = " * ", collapse = " + "), "")
#---Prepare Final Dataset---
#Extract the best stepwise variables from train
final_mod_vars <- named_coefficients %>% names()
vars <- train %>% names()
#Fix "`" and then return list of appropriate vars
variables_for_selection = c()
for (i in 1:length(final_mod_vars)) {
var_to_list = str_replace_all(final_mod_vars[i], "`", "" )
variables_for_selection = c(variables_for_selection, var_to_list)
}
#Prepare Final Training Dataset Based on Selected Variables
train_final <- train %>% select_if(vars %in% variables_for_selection)
train_final <- train_final %>% bind_cols(train$cube_root_total)
colname = train_final %>% names()
train_final <- train_final %>% rename(cube_root_total = colname[length(colname)])
#Train Final Model - Success (Same coef as original)
stepwise_model <- lm(cube_root_total ~ .  ,data = train_final)
summary(stepwise_model)
library(coefplot)
coefplot::coefplot(stepwise_model, sort = "magnitude", decreasing = TRUE)
#Linearity-Homoscedasticity
plot(stepwise_model, which = 1, main = "Evaluation of Homoscedasticity and Linearity")
# Kolmogorov-Smirnov Test - Normality Assumption
ks <- ks.test(stepwise_model$residuals, 'pnorm')
if (ks$p.value <= 0.05) {
result = paste("H0 rejected: Non-Normal residuals")
} else {
result = paste("H0 failed to reject: the residuals ARE distributed normally")
}
ks
# Q-Q plot for residuals (Normality of Residuals)
qqnorm(resid(stepwise_model))
qqline(resid(stepwise_model))
# Durbin-Watson Test (Independence of Residuals)
dwtest(stepwise_model)
#Multicollinearity
vif_final <- vif(stepwise_model) %>% data.frame()
vif_final <- vif_final %>% rename(Highest_VIF_Values = ".") %>% arrange(desc(Highest_VIF_Values))
vif_final %>% head(5)
#Make Predictions
pred_values_total_rentals <- predict(stepwise_model, newdata = test) %>% data.frame()
pred_values_total_rentals$fit = (pred_values_total_rentals$.)^3
pred_values_total_rentals$obs = test$count_rentals
#Return Metrics
metrics <- function(y_pred, y_true){
rmse <- RMSE(y_pred, y_true) %>% round(2)
mse <- mean((y_pred - y_true)^2) %>% round(2)
mae <- MAE(y_pred, y_true) %>% round(2)
corPredAct <- cor(y_pred, y_true) %>% round(3)
df = data.frame(Root_Mean_Squared_Error = rmse,
Mean_Absolute_Error = mae,
R_squared_Pred_Obs = (corPredAct*corPredAct) %>% round(3))
df <- df %>% t() %>% data.frame()
df <- df %>% rename(Metric = ".")
return (df)
}
model_metrics_df = metrics(y_pred = pred_values_total_rentals$fit,
y_true = pred_values_total_rentals$obs)
model_metrics_df
#Total Rentals Predicts vs. Observed Values
a_v_p_plot <- ggplot(pred_values_total_rentals, aes(x=fit, y=obs)) +
geom_point(aes(color = abs(obs - fit)), size = 3, alpha = 0.6) +
geom_abline(intercept=0, slope=1, linetype="dashed", color="red") +
scale_color_viridis_c(option = "B", direction = -1) +
labs(
title = "Actual vs Predicted Number of Total Rentals",
subtitle = paste("Average Prediction Error(Mean Absolute Error): ", model_metrics_df$Metric[2], "bike rentals"),
y = "Actual Number of Rentals",
x = "Predicted Number of Rentals",
color = "Residual Magnitude") +
scale_x_continuous(breaks = seq(0, 1000, 250), labels = seq(0,1000,250)) +
scale_y_continuous(breaks = seq(0, 1000, 250), labels = seq(0,1000,250)) +
theme(legend.position = "bottom",
axis.text= element_text(face = "bold",
size = 12),
plot.title = element_text(face = "bold",
size = 16))
a_v_p_plot
fig.1
fig.2
datatype_plot
target_plot
cont_plot
#Summary Statistics of Continuous Variables
datatable(numVars, class = 'cell-border stripe', options = list(searching = FALSE,
dom = 't'))
bool_plot
cat_plot_1 <- ggarrange(season_plot, year_plot, month_plot, day_plot)
cat_plot_1
cat_plot_2 <- ggarrange(hour_plot, weather_plot, nrow = 2, ncol = 1)
cat_plot_2
date_plot
corr_mat <- chart.Correlation(corr_df)
corr_mat
temp_mult_plot
ss_plot
wk_cas
reg_plot
tot_plot
summary(full_model)
# Kolmogorov-Smirnov Test - Normality Assumption
ks.test(full_model$residuals, 'pnorm')
if (ks$p.value <= 0.05) {
print("H0 rejected: Residuals are NOT normally distributed")
} else {
print("H0 failed to reject: the residuals ARE distributed normally")
}
# Q-Q plot for residuals
qqnorm(resid(full_model))
qqline(resid(full_model))
#Breusch-Pagan Test - Homoscedasticity Assumption
bp <- bptest(full_model)
if (bp$p.value <= 0.05) {
print("H0 rejected: Error variance spread INCONSTANTLY (Heteroscedasticity)")
} else {
print("H0 failed to reject: Error variance spread CONSTANTLY (Homoscedasticity)")
}
plot(full_model, which = 1)
print.noquote("Below: Variance Inflation Factors of Full Model")
highest_vif
print.noquote("---")
plot(full_model, which = 5)
trans_total
summary(stepwise_model)
print.noquote("Below: Variance Inflation Factors of Final Model")
vif(stepwise_model)
print.noquote("---")
# Kolmogorov-Smirnov Test - Normality Assumption
ks.test(stepwise_model$residuals, 'pnorm')
bptest(stepwise_model)
# Q-Q plot for residuals
par(mfrow = c(3,1))
qqnorm(resid(stepwise_model))
qqline(resid(stepwise_model))
plot(stepwise_model, which = 1)
plot(stepwise_model, which = 5)
par(mfrow = c(2,2))
plot(OLSregbacksum$adjr2, xlab = "Number of Variables",
ylab = "Adjusted RSq", type = "l", lwd = 1.5, main = "Number of Variables Vs. Adjusted R2",
sub = paste("Best Adjusted RSq Value: " , adjr2 ),
cex.main = 1.15, cex.lab = 1, cex.axis = 1.05, font.axis = 2,
font.lab = 2, panel.first = grid(nx = NULL, ny = NULL, col = "gray",
lty = 2))
points(36, OLSregbacksum$adjr2[36], col = "darkred", cex = 2, pch = 20)
plot(OLSregbacksum$cp, xlab = "Number of Variables", ylab = "Cp",
type = "l", lwd = 1.5, cex.main = 1.15, cex.lab = 1, cex.axis = 1.05,
font.axis = 2, font.lab = 2, main = "Number of Variables Vs. Mallow's Cp",
sub = paste("Best Mallow's Cp Value: " , cp ),
panel.first = grid(nx = NULL, ny = NULL, col = "gray", lty = 2))
points(36, OLSregbacksum$cp[36], col = "darkred", cex = 2, pch = 20)
plot(OLSregbacksum$bic, xlab = "Number of Variables", ylab = "BIC",
type = "l", lwd = 1.5, cex.main = 1.15, cex.lab = 1, cex.axis = 1.05,
font.axis = 2, font.lab = 2, main = "Number of Variables Vs. BIC",
sub = paste("Best BIC Value: " , bic ),
panel.first = grid(nx = NULL, ny = NULL, col = "gray", lty = 2))
points(36, OLSregbacksum$bic[36], col = "darkred", cex = 2, pch = 20)
plot(OLSregbacksum$rss, xlab = "Number of Variables", ylab = "RSS",
type = "l", lwd = 1.5, cex.main = 1.15, cex.lab = 1, cex.axis = 1.05,
font.axis = 2, font.lab = 2, main = "Number of Variables Vs. RSS",
panel.first = grid(nx = NULL, ny = NULL, col = "gray", lty = 2))
coefplot::coefplot(stepwise_model, sort = "magnitude", decreasing = TRUE) + labs(title = "Final Stepwise Model Variable Coefficients", x = "Coefficient Value", y = "Predictor")
a_v_p_plot
